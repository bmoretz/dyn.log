[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 Brandon Moretz Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/Configuration.html","id":"configurations","dir":"Articles","previous_headings":"","what":"Configurations","title":"Configuration","text":"dyn.log package configuration-driven provide client flexibility look & feel log layouts/formatting (aesthetics), interacts container environment. vignette focus less logger works, make work . two main ways set logging configuration: init_logger(file_path = “~/package/config.yaml”) options(“dyn.log.config” = “~/package/config.yaml”) work large project (.e., comprised many packages) setting global option .Rprofile suggested approach; save great deal time.","code":""},{"path":"/articles/Configuration.html","id":"templates","dir":"Articles","previous_headings":"","what":"Templates","title":"Configuration","text":"package comes preconfigured logging setups common starting points bespoke configuration. see configuration templates call get_configurations method: return list configurations yaml file path local system. two main ways utilize ‘OTB’ templates, basic idea copying pre-configured template package local working environment, setting logger look file going-forward.","code":"configs <- get_configurations() configs"},{"path":"/articles/Configuration.html","id":"package","dir":"Articles","previous_headings":"Templates","what":"Package","title":"Configuration","text":"use custom logging configuration package: make new template part package, load , can: Put packages’ “.onLoad” handler: , put line .Rprofile, whenver attach dyn.log package, logger automatically load custom configuration.","code":"file.copy(from = configs$default, to = \"inst/logging.yaml\") init_logger(config_file = system.file(\"logging.yaml\", package = \"yourpkg\")) options(\"dyn.log.config\" = system.file(\"logging.yaml\", package = \"yourpkg\"))"},{"path":"/articles/Configuration.html","id":"script-directory","dir":"Articles","previous_headings":"Templates","what":"Script Directory","title":"Configuration","text":"Usage custom configuration directory/project basically : .Rprofile: , whenever dyn.log package gets attached, auto-configure .","code":"# use here to get your workspace root file.copy(from = configs$default,            to = file.path(here::here(), \"logging.yaml\")) library(dyn.log)  init_logger(\"logging.yaml\") options(\"dyn.log.config\" = file.path(here::here(), \"logging.yaml\"))"},{"path":"/articles/Configuration.html","id":"integration","dir":"Articles","previous_headings":"","what":"Integration","title":"Configuration","text":"Now ’ll take look customizing log layouts types project. client code leverages use R6 classes, can specify custom layout standalone objects objects part hierarchy using association property. example, TestObject helper object defined testthat folder dyn.log: object hierarchy declared follows: layout configuration “TestObject” looks like : can see, logger knows log contextual information object derived “TestObject.” TestObject exposes two properties, one public one private: id: private property random string unique object instance. cls_name\": public property calculated object instantiated get correct run-time class name (since derived). can powerful mechanic templatizing important contextual information client applications scripts. detailed look layouts refer Layouts vignette online, vignette(“Layouts”, package = “dyn.log”)","code":"TestObject <- R6::R6Class(   classname = \"TestObject\",    public = list(      cls_name = NULL,      initialize = function() {       private$id <- private$generate_id()       self$cls_name <- private$get_class_name()     },      identifier = function() {       invisible(private$id)     },      class_name = function() {       invisible(self$cls_name)     },      invoke_logger = function() {       a <- \"test\"; b <- 123; c <- 100L        Logger$trace(\"these are some variables: {a} - {b} - {c}\")     }   ),    private = list(     id = NULL,      generate_id = function(n = 15) {       paste0(sample(LETTERS, n, TRUE), collapse =  \"\")     },      get_class_name = function() {       calls <- as.character(sys.calls())       calls <- calls[max(which(stringr::str_detect(calls, \"\\\\$new\\\\(.*\\\\)\")))]       stopifnot(length(calls) == 1)       invisible(stringr::str_remove(calls, \"\\\\$new\\\\(.*\\\\)\"))     }   ) )  DerivedTestObject <- R6::R6Class(   classname = \"DerivedTestObject\",   inherit = TestObject,   public = list(      initialize = function() {       super$initialize()     },      invoke_logger = function() {       a <- \"derived test\"; b <- 321; c <- 200L        Logger$trace(\"variables in derived: {a} - {b} - {c}\")     }   ) ) layouts: - association: TestObject   seperator: ' '   new_line: \\n   formats: !expr list(            new_fmt_literal(crayon::cyan$bold, 'Class:'),            new_fmt_cls_field(crayon::bgCyan$silver$bold, 'cls_name'),            new_fmt_literal(crayon::cyan$bold, 'Object Id:'),            new_fmt_cls_field(crayon::bgCyan$silver$bold, 'id'),            new_fmt_line_break(),            new_fmt_log_level(),            new_fmt_timestamp(crayon::silver$italic),            new_fmt_exec_scope(crayon::magenta$bold, 'calling_fn'),            new_fmt_log_msg()) init_logger(configs$object) TRACE [03/05/22 20:54:10 +0000] dyn.log loaded 'object' configuration successfully. test_obj <- DerivedTestObject$new()  test_obj$invoke_logger() Class: DerivedTestObject Object Id: NYHHBGHRYUUZIAA TRACE [03/05/22 20:54:10 +0000] test_obj$invoke_logger variables in derived: derived test - 321 - 200"},{"path":"/articles/Formats.html","id":"format-objects","dir":"Articles","previous_headings":"","what":"Format Objects","title":"Formats","text":"","code":"library(dyn.log) configs <- dyn.log::get_configurations()  # set logging config with tweaks for knitr output init_logger(configs$knitr) ## TRACE [03/05/22 20:54:13 +0000] dyn.log loaded 'knitr' configuration successfully."},{"path":"/articles/Formats.html","id":"overview","dir":"Articles","previous_headings":"Format Objects","what":"Overview","title":"Formats","text":"Format objects driver customization log rendering. Log layouts developed composition design pattern mind; log layout simply series formats get evaluated associated context form log message. formats derive fmt_layout base type couple generics associated , specifically: style value. fmt_layout meant abstract base type; driving logging framework can make assumptions treat format object.","code":""},{"path":"/articles/Formats.html","id":"format-types","dir":"Articles","previous_headings":"Format Objects","what":"Format Types","title":"Formats","text":"five main categories log format objects: fmt_level_info: log level information. fmt_log_msg: log message, evaluated standard glue format. fmt_metric: ‘system’ context value; see detail. fmt_timestamp: current system time customizable format. fmt_exec_scope: ‘execution’ context value; see detail. fmt_cls_field: field value encompassing R6 class; see detail. fmt_literal: literal value, useful tweaking exact format specifications. fmt_newline: new line feed log message, useful multi-line log messages lot contextual information log output.","code":""},{"path":"/articles/Formats.html","id":"system-context","dir":"Articles","previous_headings":"Format Objects > Format Types","what":"System Context","title":"Formats","text":"values available fmt_metric type can accessed via sys_context:","code":"sys_context() $sysname [1] \"Linux\"  $release [1] \"5.11.0-1028-azure\"  $version [1] \"#31~20.04.2-Ubuntu SMP Tue Jan 18 08:46:15 UTC 2022\"  $nodename [1] \"fv-az77-935\"  $machine [1] \"x86_64\"  $login [1] \"unknown\"  $user [1] \"runner\"  $effective_user [1] \"runner\"  $r_ver [1] \"4.1.2\"  attr(,\"class\") [1] \"sys_context\" \"context\""},{"path":"/articles/Formats.html","id":"system-context-example","dir":"Articles","previous_headings":"Format Objects > Format Types > System Context","what":"System Context Example","title":"Formats","text":"can see, log message great deal detail, difficult interpret due amount information jammed one line. literals new lines come play.","code":"new_log_layout(   format = list(     new_fmt_log_level(),     new_fmt_metric(crayon::green$bold, \"sysname\"),     new_fmt_metric(crayon::yellow$bold, \"release\"),     new_fmt_timestamp(crayon::silver$italic, \"[%x %H:%M:%S]\"),     new_fmt_log_msg()   ),   seperator = '-',   association = \"ex-sys-layout\" )  var1 <- \"abc\"; var2 <- 123; var3 <- round(runif(1), digits = 6)  Logger$debug(\"my log message - var1: {var1}, var2: {var2}, var3: {var3}\",              layout = \"ex-sys-layout\") DEBUG-Linux-5.11.0-1028-azure-[03/05/22 20:54:13]-my log message - var1: abc, var2: 123, var3: 0.971494"},{"path":"/articles/Formats.html","id":"literals-new-lines","dir":"Articles","previous_headings":"Format Objects > Format Types","what":"Literals & New Lines","title":"Formats","text":"Literals new lines simple formatting objects help tweak layout log message something informative easy consume. Taking previous example, tweaking format slightly incorporating literals & new lines, can produce log message like : information previous example, much easier consume.","code":"new_log_layout(   format = list(     new_fmt_metric(crayon::green$bold, \"sysname\"),     new_fmt_literal(crayon::magenta, \"[\"),     new_fmt_metric(crayon::blue$bold, \"release\"),     new_fmt_literal(crayon::magenta, \"]\"),     new_fmt_line_break(),     new_fmt_log_level(),     new_fmt_timestamp(crayon::silver$italic, \"[%x %H:%M:%S]\"),     new_fmt_log_msg()   ),   seperator = ' ',   association = \"ex-syslit-layout\" )  var1 <- \"abc\"; var2 <- 123; var3 <- round(runif(1), digits = 6)  Logger$debug(\"my log message - var1: {var1}, var2: {var2}, var3: {var3}\",              layout = \"ex-syslit-layout\") Linux [ 5.11.0-1028-azure ] DEBUG [03/05/22 20:54:13] my log message - var1: abc, var2: 123, var3: 0.350911"},{"path":"/articles/Formats.html","id":"execution-scope","dir":"Articles","previous_headings":"Format Objects > Format Types","what":"Execution Scope","title":"Formats","text":"Execution scope formats give ability log context around invocation logger, context object, much like sys_context, called exec_context: evaluated exec_context gives structure 3 fields: call_1 : “global::test” - top level call call_2 : “wrapper” - … call_3 : “outer” - … call_4 : “inner” - inner fn call calling_fn: inner ncalls: 4 execution scope can accessed via new_fmt_exec_scope format object, e.g.:","code":"test <- function(a, b, c) {   wrapper <- function(x, y, z) {     outer <- function(d, e, f) {       inner <- function(g, h, i) {         # call_subset is used here to skip past knitr execution calls         exec_context(max_calls = 30, call_subset = c(callstack_settings$start,                                                      callstack_settings$stop))       }        inner(d, e, f)     }      outer(x, y, z)   }   wrapper(a, b, c) }  exec_context <- test(1,2,3) exec_context $call_stack           call_1           call_2           call_3           call_4                NA               NA               NA               NA            call_5           call_6           call_7           call_8                NA               NA               NA               NA            call_9          call_10          call_11          call_12                NA               NA               NA               NA           call_13          call_14          call_15                NA               NA \"get_call_stack\"  attr(,\"class\") [1] \"call_stack\" \"stack\"       $calling_fn [1] \"get_call_stack\"  $ncalls [1] 15  attr(,\"class\") [1] \"exec_context\" \"context\" new_log_layout(   format = list(     new_fmt_metric(crayon::green$bold, 'sysname'),     new_fmt_metric(crayon::blue$yellow, 'release'),     new_fmt_line_break(),     new_fmt_log_level(),     new_fmt_timestamp(crayon::silver$italic, '[%x %H:%M:%S]'),     new_fmt_literal(crayon::magenta$bold, 'fn('),     new_fmt_exec_scope(crayon::magenta$bold, 'calling_fn'),     new_fmt_literal(crayon::magenta$bold, ')'),     new_fmt_log_msg(),     new_fmt_line_break(),     new_fmt_exec_scope(crayon::bgYellow$blue$bold, 'call_stack')   ),   seperator = '-',   association = 'ex-sysexec-cs-layout' )  local_fn <- function() {   outer <- function() {     inner <- function() {       var1 <- \"abc\"; var2 <- 123; var3 <- round(runif(1), digits = 6)        Logger$debug(\"my log message - var1: '{var1}', var2: '{var2}', var3: '{var3}'\",                    layout = 'ex-sysexec-cs-layout')     }     inner()   }   outer() }  local_fn() Linux-5.11.0-1028-azure DEBUG-[03/05/22 20:54:14]-fn(-get_call_stack-)-my log message - var1: 'abc', var2: '123', var3: '0.499116' NA-NA-NA-NA-NA-NA-NA-NA-NA-NA-NA-NA-NA-NA-get_call_stack"},{"path":"/articles/Layouts.html","id":"format-objects","dir":"Articles","previous_headings":"","what":"Format Objects","title":"Layouts","text":"","code":"library(dyn.log)  configs <- dyn.log::get_configurations(pkgname = \"dyn.log\")  init_logger(configs$knitr) #> TRACE [03/05/22 20:54:16 +0000] dyn.log loaded 'knitr' configuration successfully."},{"path":"/articles/Layouts.html","id":"overview","dir":"Articles","previous_headings":"Format Objects","what":"Overview","title":"Layouts","text":"Log Layouts mechanism ties everything package together composition based design. log layout essentially container formats, defines exactly log message get rendered. Layouts also additional metadata attributes allow overrides default format separators, spacing, etc., well mechanism associating particular log layout type R6 class.","code":""},{"path":"/articles/Layouts.html","id":"defaults","dir":"Articles","previous_headings":"Format Objects > Overview","what":"Defaults","title":"Layouts","text":"two basic layouts come standard configuration (default.yaml) bundled package, default log_level. R equivalent creating default layout essentially yaml definition: info level log message generated package default config: Now new layout defined : render exact output, idea defining layouts via custom R code via yaml configuration exactly .","code":"layouts: - association: default   seperator: ' '   new_line: \\n   formats: new_fmt_log_level(),            new_fmt_timestamp(crayon::silver$italic),            new_fmt_log_msg() - association: level_msg   seperator: ' '   new_line: \\n   formats: new_fmt_log_level(),            new_fmt_log_msg() new_log_layout(   format = list(     new_fmt_log_level(),     new_fmt_timestamp(crayon::silver$italic),     new_fmt_log_msg()       ),   association = \"default_via_r\" ) Logger$info(\"this is the default layout\") INFO [03/05/22 20:54:16 +0000] this is the default layout Logger$info(\"this is the custom layout object\", layout = \"default_via_r\") INFO [03/05/22 20:54:16 +0000] this is the custom layout object"},{"path":"/articles/Layouts.html","id":"customization","dir":"Articles","previous_headings":"Format Objects > Overview","what":"Customization","title":"Layouts","text":"create customized log layout need specify formats want rendered (arguments) formats argument, seen . See Formats vignette detail formats.","code":"new_log_layout(   format = list(     new_fmt_metric(crayon::green$bold, \"sysname\"),     new_fmt_metric(crayon::yellow$bold, \"release\"),     new_fmt_line_break(),     new_fmt_log_level(),     new_fmt_timestamp(crayon::silver$italic),     new_fmt_exec_scope(crayon::magenta$bold, \"calling_fn\"),     new_fmt_literal(crayon::blue$italic, \"literal text\"),     new_fmt_log_msg(),     new_fmt_line_break(),     new_fmt_exec_scope(crayon::cyan$bold, \"call_stack\")   ),   seperator = '-',   association = \"log-with-callstack\" ) log_fn <- function() {   outer <- function() {     inner <- function() {              var1 <- \"abc\"; var2 <- 123; var3 <- round(runif(1), digits = 6)              Logger$debug(\"my log message - var1: '{var1}', var2: '{var2}', var3: '{var3}'\",                     layout = 'log-with-callstack')     }     inner()   }   outer() }  log_fn() Linux-5.11.0-1028-azure DEBUG-[03/05/22 20:54:16 +0000]-get_call_stack-literal text-my log message - var1: 'abc', var2: '123', var3: '0.162918' NA-NA-NA-NA-NA-NA-NA-NA-NA-NA-NA-NA-NA-NA-get_call_stack"},{"path":"/articles/Levels.html","id":"dynamic-log-levels","dir":"Articles","previous_headings":"","what":"Dynamic Log Levels","title":"Levels","text":"","code":"library(dyn.log) init_logger()"},{"path":"/articles/Levels.html","id":"definitions","dir":"Articles","previous_headings":"Dynamic Log Levels","what":"Definitions","title":"Levels","text":"One main objectives dyn.log configuration driven possible, allows logger conform problem - way around. Log levels fully configuration driven, specified logger configuration following schema: levels node contains log levels want available environment. log level defined configuration, automatically becomes accessible via first-class function dispatcher, e.g.:","code":"levels: - name: DEBUG   description: This level designates fine-grained informational events that are most useful to debug an application.   severity: !expr 500L   log_style: !expr crayon::make_style('deepskyblue2')$bold   msg_style: !expr crayon::make_style('gray90')"},{"path":"/articles/Levels.html","id":"attributes","dir":"Articles","previous_headings":"Dynamic Log Levels > Definitions","what":"Attributes","title":"Levels","text":"attributes define log level : name: gets displayed level log message rendered. description: brief description log level & limited info appropriate usage. severity: log severity used determining message get displayed according currently set evaluation threshold. log_style: crayon colorize log level. msg_style: crayon style gray scale log message, typically inverted strength, according severity.","code":""},{"path":"/articles/Levels.html","id":"invocation","dir":"Articles","previous_headings":"Dynamic Log Levels > Definitions","what":"Invocation","title":"Levels","text":"defined log level logger configuration, dispatcher automatically method corresponding level. enables fairly intuitive approach invoking log dispatcher, e.g., previous debug level defined configuration log message level: ’ll notice log messages default use standardize glue format local variables capturable log output.","code":"var1 <- \"abc\"; var2 <- 123; var3 <- round(runif(1), digits = 6)  Logger$debug(\"my log message - var1: {var1}, var2: {var2}, var3: {var3}\") DEBUG [03/05/22 20:54:18 +0000] my log message - var1: abc, var2: 123, var3: 0.151521"},{"path":"/articles/Levels.html","id":"localization","dir":"Articles","previous_headings":"Dynamic Log Levels > Definitions","what":"Localization","title":"Levels","text":"can see log levels specified logging configuration calling log_levels(). output names defined levels, detail defines .","code":"log_levels()"},{"path":"/articles/Levels.html","id":"detail","dir":"Articles","previous_headings":"Dynamic Log Levels > Definitions","what":"Detail","title":"Levels","text":"get details defined level can call level_info(): detailed information log level shows every configurable attribute level, example level renders associated crayon styles level message. vanilla log layout consisting level msg get rendered look example attribute.","code":"level_info(\"debug\") $name [1] \"DEBUG\"  $description [1] \"This level designates fine-grained informational events that are most useful to debug an application.\"  $severity [1] 500  $style $style$level Crayon style function, deepskyblue2, bold: example output.  $style$message Crayon style function, gray90: example output.  $style$example DEBUG - This level designates fine-grained informational events that are most useful to debug an application."},{"path":[]},{"path":"/articles/Levels.html","id":"out-of-the-box","dir":"Articles","previous_headings":"Dynamic Log Levels > Configuration","what":"Out of the Box","title":"Levels","text":"default (OTB) logging configuration closely resembles fairly ubiquitous log4j level scheme. utility method called display_log_levels() output loaded log levels configuration rendered defined styles & definitions: Note: even fansi amazing rendering html format, terminal may look slightly different; expecialy grayscale colors log messages.","code":"display_log_levels() TRACE This level designates finer-grained informational events than the DEBUG.  DEBUG This level designates fine-grained informational events that are most useful to debug an application.  INFO This level designates informational messages that highlight the progress of the application at coarse-grained level.  SUCCESS This level designates that the operation was unencumbered.  WARN This level designates potentially harmful situations.  ERROR This level designates error events that might still allow the application to continue running.  FATAL This level designates very severe error events that will presumably lead the application to abort."},{"path":"/articles/Levels.html","id":"customizing","dir":"Articles","previous_headings":"Dynamic Log Levels > Configuration","what":"Customizing","title":"Levels","text":"customize log levels environment, please see configuration vignette.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Brandon Moretz. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Moretz B (2022). dyn.log: Dynamic Logging R Inspired Configuration Driven Development. R package version 0.3.2, https://bmoretz.github.io/dyn.log/.","code":"@Manual{,   title = {dyn.log: Dynamic Logging for R Inspired by Configuration Driven Development},   author = {Brandon Moretz},   year = {2022},   note = {R package version 0.3.2},   url = {https://bmoretz.github.io/dyn.log/}, }"},{"path":[]},{"path":"/index.html","id":"overview-","dir":"","previous_headings":"","what":"Overview","title":"Dynamic Logging for R Inspired by Configuration Driven Development","text":"goal dyn.log comprehensive dynamic configuration driven logging package R. several excellent logging solutions already R ecosystem, always feel constrained way . Every project designed differently achieve stated goal; solve problem, ultimately utility logging solution ability adapt project’s design. rai·​son d’être dyn.log; provide modular design, template mechanics configuration-based integration model. enableds logger integrate deeply design, even though knows nothing .","code":""},{"path":[]},{"path":"/index.html","id":"github","dir":"","previous_headings":"Installation","what":"GitHub","title":"Dynamic Logging for R Inspired by Configuration Driven Development","text":"can install development version dyn.log GitHub :","code":"remotes::install_github(\"bmoretz/dyn.log\")"},{"path":"/index.html","id":"cran","dir":"","previous_headings":"Installation","what":"CRAN","title":"Dynamic Logging for R Inspired by Configuration Driven Development","text":"can install latest stable version dyn.log CRAN: (coming soon)","code":""},{"path":"/index.html","id":"overview","dir":"","previous_headings":"Installation","what":"Overview","title":"Dynamic Logging for R Inspired by Configuration Driven Development","text":"","code":"library(dyn.log)"},{"path":"/index.html","id":"basic-usage","dir":"","previous_headings":"Installation","what":"Basic Usage","title":"Dynamic Logging for R Inspired by Configuration Driven Development","text":"basic/common usage simply install package one sources, load package, initialize logger, logging instance show global environment (default, named ‘Logger’): basic log ouput can also skip call init_logger setting global option specifies configuration wish use, .e., placing: .Rprofile automatically configure default logger global logging instance attached call: “dyn.log.config” variable can either predefined configuration (name) package, path local file pre-customized. useful sharing single bespoke log configuration across multiple packages projects.","code":"library(dyn.log)  init_logger()  var1 <- \"abc\"; var2 <- 123; var3 <- runif(1)  Logger$debug(\"my log message - var1: {var1}, var2: {var2}, var3: {var3}\") options(\"dyn.log.config\" = \"default\") library(dyn.log)"},{"path":"/index.html","id":"logging","dir":"","previous_headings":"Installation","what":"Logging","title":"Dynamic Logging for R Inspired by Configuration Driven Development","text":"three main components log message, covered detail respective vignettes. detail logging works can customize , please see package site: levels want accessible logger. types define contextual information logged message. Containers format objects define rendering specifications log message. logging functionality exposed R6 class, LogDispatch, accessible global variable called, default, Logger. Logger methods correspond log levels defined yaml configuration, makes logging intuitive. Log messages automatically assumed standard glue format local environment variables captured messages.","code":""},{"path":"/index.html","id":"simple-example","dir":"","previous_headings":"Installation > Logging","what":"Simple Example","title":"Dynamic Logging for R Inspired by Configuration Driven Development","text":"“box” (OTB) configuration specifies default vanilla log format displays level logged, current time-stamp (default TS format), log message: basic log ouput","code":"var1 <- \"abc\"; var2 <- 123; var3 <- runif(1)  Logger$debug(\"my log message - var1: {var1}, var2: {var2}, var3: {var3}\")"},{"path":"/index.html","id":"configuration","dir":"","previous_headings":"Installation > Logging","what":"Configuration","title":"Dynamic Logging for R Inspired by Configuration Driven Development","text":"Everything dyn.log configuration driven, package comes basic configuration default.yaml, show entirety broken sections follow: detailed look customizing settings please see Configurations vignette online.","code":"variable: Logger settings:   threshold: TRACE   callstack:     max: 5     start: -1     stop: -1 levels: - name: TRACE   description: This level designates finer-grained informational events than the DEBUG.   severity: 600   log_style: !expr crayon::make_style(\"antiquewhite3\")$bold   msg_style: !expr crayon::make_style('gray60') - name: DEBUG   description: This level designates fine-grained informational events that are most useful to debug an application.   severity: 500   log_style: !expr crayon::make_style('deepskyblue2')$bold   msg_style: !expr crayon::make_style('gray90') - name: INFO   description: This level designates informational messages that highlight the progress of the application at coarse-grained level.   severity: 400   log_style: !expr crayon::make_style('dodgerblue4')$bold   msg_style: !expr crayon::make_style('gray100') - name: SUCCESS   description: This level designates that the operation was unencumbered.   severity: 300   log_style: !expr crayon::make_style('chartreuse')$bold   msg_style: !expr crayon::bgGreen$bold$black - name: WARN   description: This level designates potentially harmful situations.   severity: 350   log_style: !expr crayon::make_style('darkorange')$bold   msg_style: !expr crayon::bgYellow$bold$black - name: ERROR   description: This level designates error events that might still allow the application to continue running.   severity: 200   log_style: !expr crayon::make_style('firebrick1')$bold   msg_style: !expr crayon::bgBlack$bold$white - name: FATAL   description: This level designates very severe error events that will presumably lead the application to abort.   severity: 100   log_style: !expr crayon::make_style('firebrick')$bold   msg_style: !expr crayon::bgRed$bold$white layouts: - association: default   seperator: ' '   new_line: \\n   formats: new_fmt_log_level(),            new_fmt_timestamp(crayon::silver$italic),            new_fmt_log_msg() - association: level_msg   seperator: ' '   new_line: \\n   formats: new_fmt_log_level(),            new_fmt_log_msg()"},{"path":"/index.html","id":"logger-variable","dir":"","previous_headings":"Installation","what":"Logger Variable","title":"Dynamic Logging for R Inspired by Configuration Driven Development","text":"first setting, variable, defines name global variable want access logger . default Logger, can easily change : log, my_log, msg value (long ’s valid R variable name). LogDispatch object also singleton, always access logger directly: custom var name","code":"nums <- paste0(round(rnorm(25, 0, 5), digits = 2), collapse = \", \")  LogDispatch$new()$warn(\"These numbers '{nums}' are out of the expected range.\")"},{"path":"/index.html","id":"settings","dir":"","previous_headings":"Installation > Logger Variable","what":"Settings","title":"Dynamic Logging for R Inspired by Configuration Driven Development","text":"settings node contains core settings log dispatcher, attribute. covered detail Configuration section manual.","code":""},{"path":"/index.html","id":"levels","dir":"","previous_headings":"Installation > Logger Variable","what":"Levels","title":"Dynamic Logging for R Inspired by Configuration Driven Development","text":"levels node contains log levels want available environment. log level defined configuration, automatically becomes accessible via first-class function dispatcher, e.g.: can view configured log levels, get quick summary calling display_log_levels(): log levels default logging configuration closely resembles fairly ubiquitous log4j scheme. detailed look log levels refer Levels vignette online.","code":"Logger$info(\"This will be logged with 'INFO' severity level\") display_log_levels()"},{"path":"/index.html","id":"layouts","dir":"","previous_headings":"Installation > Logger Variable","what":"Layouts","title":"Dynamic Logging for R Inspired by Configuration Driven Development","text":"Every log message needs format dispatcher knows render log call. Formats defined yaml config comes basic ones pre-configured. default log layout standard format: {LEVEL} - {TIMESTAMP} - {MSG}, space separator format objects.","code":""},{"path":"/index.html","id":"customizing-a-log-message","dir":"","previous_headings":"Installation","what":"Customizing a Log Message","title":"Dynamic Logging for R Inspired by Configuration Driven Development","text":"Log message layouts exposed S3 type package called log_layout. Layouts composed series objects inherit fmt_layout. custom log ouput detailed look layouts refer Layouts vignette online.","code":"new_log_layout(   format = list(     new_fmt_metric(crayon::green$bold, \"sysname\"),     new_fmt_metric(crayon::red$bold, \"release\"),     new_fmt_line_break(),     new_fmt_log_level(),     new_fmt_timestamp(crayon::silver$italic),     new_fmt_log_msg()   ),   seperator = '-',   association = \"custom\" )  Logger$info(\"my log message - var1: {var1}, var2: {var2}, var3: {var3}\", layout = \"custom\")"},{"path":"/index.html","id":"logging-associations","dir":"","previous_headings":"Installation","what":"Logging Associations","title":"Dynamic Logging for R Inspired by Configuration Driven Development","text":"One thing may noticed previous log layout definition association parameter. Associations useful way build customized log layout custom R6 types. can especially useful larger applications, plumber services shiny dashboards. TestObject defined , ’s primary responsibly assign randomly generated identifier instance via constructor. also method object call logger local scope variables logged well. class defined, can create custom log layout associated R6 type new log layout: custom log ouput can see, logger invoked inside class custom layout associated custom layout get used. follow-log call (outside class scope) reverts back standard layout settings. detailed look customizing layout specific type, please see Configurations vignette online example.","code":"TestObject <- R6::R6Class(   classname = \"TestObject\",    public = list(     id = NULL,      initialize = function() {       self$id <- private$generate_id()     },      test_method = function() {       a <- \"test\"; b <- 123; c <- runif(1)        Logger$info(\"these are some variables: {a} - {b} - {c}\")     }   ),    private = list(     generate_id = function(n = 15) {       paste0(sample(LETTERS, n, TRUE), collapse =  '')     }   ) )  obj <- TestObject$new() new_log_layout(   format = list(     new_fmt_literal(crayon::cyan$bold, \"Object Id:\"),     new_fmt_cls_field(crayon::bgCyan$silver$bold, \"id\"),     new_fmt_line_break(),     new_fmt_log_level(),     new_fmt_timestamp(crayon::silver$italic),     new_fmt_log_msg(),     new_fmt_line_break(),     new_fmt_metric(crayon::green$bold, \"sysname\"),     new_fmt_metric(crayon::red$bold, \"nodename\"),     new_fmt_literal(crayon::blue$bold, \"R Version:\"),     new_fmt_metric(crayon::blue$italic$bold, \"r_ver\"),     new_fmt_line_break()   ),   association = \"TestObject\" )  # notice above, \"Logger$info\" is called inside the context of the Test Object, # and the variables are scoped to inside the function. obj$test_method()    Logger$debug(\"this is a normal log msg\")"},{"path":"/index.html","id":"acknowledgments","dir":"","previous_headings":"","what":"Acknowledgments","title":"Dynamic Logging for R Inspired by Configuration Driven Development","text":"R Core developing maintaining amazing language. R Studio building incredible open-source ecosystem. Hadley Wickham super-human. Jim Hester fantastic r-lib/actions (covr, lintr & build, pkgdown, etc). Brody Gaslam developing fansi package responsible pretty logger output documentation. Everyone #rstats community inclusive, welcoming incredibly knowledgeable.","code":""},{"path":"/reference/LogDispatch.html","id":null,"dir":"Reference","previous_headings":"","what":"Log Dispatch — LogDispatch","title":"Log Dispatch — LogDispatch","text":"R6 Class dispatches log messages throughout application.","code":""},{"path":"/reference/LogDispatch.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Log Dispatch — LogDispatch","text":"object designed centralized logging dispatcher renders log messages appropriate context calling object. log_layout() object used generate log message layouts (render formats), used LogDispatcher render highly-customizable detailed log messages.","code":""},{"path":[]},{"path":[]},{"path":"/reference/LogDispatch.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Log Dispatch — LogDispatch","text":"LogDispatch$new() LogDispatch$attach_log_levels() LogDispatch$add_log_level() LogDispatch$get_settings() LogDispatch$set_settings()","code":""},{"path":"/reference/LogDispatch.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Log Dispatch — LogDispatch","text":"Creates new instance log config.","code":""},{"path":"/reference/LogDispatch.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log Dispatch — LogDispatch","text":"","code":"LogDispatch$new()"},{"path":"/reference/LogDispatch.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Log Dispatch — LogDispatch","text":"new LogLayout object.","code":""},{"path":"/reference/LogDispatch.html","id":"method-attach-log-levels-","dir":"Reference","previous_headings":"","what":"Method attach_log_levels()","title":"Log Dispatch — LogDispatch","text":"Parses loads levels specified logging configuration registers dispatcher via log_levels active binding.","code":""},{"path":"/reference/LogDispatch.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Log Dispatch — LogDispatch","text":"","code":"LogDispatch$attach_log_levels(levels)"},{"path":"/reference/LogDispatch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log Dispatch — LogDispatch","text":"levels defined configuration","code":""},{"path":"/reference/LogDispatch.html","id":"method-add-log-level-","dir":"Reference","previous_headings":"","what":"Method add_log_level()","title":"Log Dispatch — LogDispatch","text":"Adds dynamic function short-cut log message configured level.","code":""},{"path":"/reference/LogDispatch.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Log Dispatch — LogDispatch","text":"","code":"LogDispatch$add_log_level(level)"},{"path":"/reference/LogDispatch.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log Dispatch — LogDispatch","text":"level log level","code":""},{"path":"/reference/LogDispatch.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Log Dispatch — LogDispatch","text":"reference self support chaining.","code":""},{"path":"/reference/LogDispatch.html","id":"method-get-settings-","dir":"Reference","previous_headings":"","what":"Method get_settings()","title":"Log Dispatch — LogDispatch","text":"Public wrapper around logger settings.","code":""},{"path":"/reference/LogDispatch.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Log Dispatch — LogDispatch","text":"","code":"LogDispatch$get_settings()"},{"path":"/reference/LogDispatch.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Log Dispatch — LogDispatch","text":"logger settings.","code":""},{"path":"/reference/LogDispatch.html","id":"method-set-settings-","dir":"Reference","previous_headings":"","what":"Method set_settings()","title":"Log Dispatch — LogDispatch","text":"Public wrapper around updating settings.","code":""},{"path":"/reference/LogDispatch.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Log Dispatch — LogDispatch","text":"","code":"LogDispatch$set_settings(settings)"},{"path":"/reference/LogDispatch.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log Dispatch — LogDispatch","text":"settings Logger settings.","code":""},{"path":"/reference/LogDispatch.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Log Dispatch — LogDispatch","text":"None.","code":""},{"path":"/reference/as.character.log_level.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Log Level Name — as.character.log_level","title":"Get Log Level Name — as.character.log_level","text":"gets name log level though casting character forwarding call get_level_name.","code":""},{"path":"/reference/as.character.log_level.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Log Level Name — as.character.log_level","text":"","code":"# S3 method for log_level as.character(x, ...)"},{"path":"/reference/as.character.log_level.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Log Level Name — as.character.log_level","text":"x log level ... ignored","code":""},{"path":"/reference/as.character.log_level.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Log Level Name — as.character.log_level","text":"log level name","code":""},{"path":"/reference/as.integer.log_level.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets the severity of a log level. — as.integer.log_level","title":"Gets the severity of a log level. — as.integer.log_level","text":"Gets severity log level.","code":""},{"path":"/reference/as.integer.log_level.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets the severity of a log level. — as.integer.log_level","text":"","code":"# S3 method for log_level as.integer(x, ...)"},{"path":"/reference/as.integer.log_level.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets the severity of a log level. — as.integer.log_level","text":"x log level ... ignored","code":""},{"path":"/reference/as.integer.log_level.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gets the severity of a log level. — as.integer.log_level","text":"log level","code":""},{"path":"/reference/class_scope.html","id":null,"dir":"Reference","previous_headings":"","what":"Calling Class Scope — class_scope","title":"Calling Class Scope — class_scope","text":"Gets exposed public field scope R6 class. Used evaluating cls field execution scopes.","code":""},{"path":"/reference/class_scope.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calling Class Scope — class_scope","text":"","code":"class_scope(cls)"},{"path":"/reference/class_scope.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calling Class Scope — class_scope","text":"cls R6 class export.","code":""},{"path":"/reference/class_scope.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calling Class Scope — class_scope","text":"system context evaluating fmt_metric objects.","code":""},{"path":[]},{"path":"/reference/clean_internal_calls.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean System Calls — clean_internal_calls","title":"Clean System Calls — clean_internal_calls","text":"Cleans internal system calls inside package call stack.","code":""},{"path":"/reference/clean_internal_calls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean System Calls — clean_internal_calls","text":"","code":"clean_internal_calls(call_stack)"},{"path":"/reference/clean_internal_calls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean System Calls — clean_internal_calls","text":"call_stack call stack","code":""},{"path":"/reference/clean_internal_calls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean System Calls — clean_internal_calls","text":"string representation func call.","code":""},{"path":[]},{"path":"/reference/config_specification.html","id":null,"dir":"Reference","previous_headings":"","what":"Config Specification — config_specification","title":"Config Specification — config_specification","text":"Loads & attaches logger specified config.","code":""},{"path":"/reference/config_specification.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Config Specification — config_specification","text":"","code":"config_specification()"},{"path":"/reference/config_specification.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Config Specification — config_specification","text":"Nothing.","code":""},{"path":[]},{"path":"/reference/display_log_levels.html","id":null,"dir":"Reference","previous_headings":"","what":"Display Log Levels — display_log_levels","title":"Display Log Levels — display_log_levels","text":"utility function dynamically displays configured log levels (loaded config), outputs simple layout log level msg formatted crayon styles.","code":""},{"path":"/reference/display_log_levels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display Log Levels — display_log_levels","text":"","code":"display_log_levels()"},{"path":[]},{"path":"/reference/dot-onAttach.html","id":null,"dir":"Reference","previous_headings":"","what":"Attach Handler\n\nPackage initialization routine. — .onAttach","title":"Attach Handler\n\nPackage initialization routine. — .onAttach","text":"Attach Handler Package initialization routine.","code":""},{"path":"/reference/dot-onAttach.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Attach Handler\n\nPackage initialization routine. — .onAttach","text":"","code":".onAttach(libname, pkgname)"},{"path":"/reference/dot-onAttach.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Attach Handler\n\nPackage initialization routine. — .onAttach","text":"libname library name pkgname package name","code":""},{"path":"/reference/dot-onDetach.html","id":null,"dir":"Reference","previous_headings":"","what":"Detach Handler\n\nPackage initialization routine. — .onDetach","title":"Detach Handler\n\nPackage initialization routine. — .onDetach","text":"Detach Handler Package initialization routine.","code":""},{"path":"/reference/dot-onDetach.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detach Handler\n\nPackage initialization routine. — .onDetach","text":"","code":".onDetach(libpath)"},{"path":"/reference/dot-onDetach.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detach Handler\n\nPackage initialization routine. — .onDetach","text":"libpath libpath","code":""},{"path":"/reference/dot-onLoad.html","id":null,"dir":"Reference","previous_headings":"","what":"Load Handler\n\nPackage initialization routine. — .onLoad","title":"Load Handler\n\nPackage initialization routine. — .onLoad","text":"Load Handler Package initialization routine.","code":""},{"path":"/reference/dot-onLoad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load Handler\n\nPackage initialization routine. — .onLoad","text":"","code":".onLoad(libname, pkgname)"},{"path":"/reference/dot-onLoad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load Handler\n\nPackage initialization routine. — .onLoad","text":"libname library name pkgname package name","code":""},{"path":"/reference/ensure_logger.html","id":null,"dir":"Reference","previous_headings":"","what":"Ensure Instance — ensure_logger","title":"Ensure Instance — ensure_logger","text":"Ensures active dispatcher attached specified environment.","code":""},{"path":"/reference/ensure_logger.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensure Instance — ensure_logger","text":"","code":"ensure_logger(variable)"},{"path":"/reference/ensure_logger.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensure Instance — ensure_logger","text":"variable variable name.","code":""},{"path":"/reference/ensure_logger.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ensure Instance — ensure_logger","text":"None.","code":""},{"path":[]},{"path":"/reference/evaluate_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate Layout — evaluate_layout","title":"Evaluate Layout — evaluate_layout","text":"Evaluates log layout, simply container set formats specify log entry layout.","code":""},{"path":"/reference/evaluate_layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate Layout — evaluate_layout","text":"","code":"evaluate_layout(detail, context)"},{"path":"/reference/evaluate_layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate Layout — evaluate_layout","text":"detail details layout specified evaluation. context list contexts needed evaluate formats layout.","code":""},{"path":"/reference/evaluate_layout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate Layout — evaluate_layout","text":"evaluated log layout","code":""},{"path":[]},{"path":"/reference/exec_context.html","id":null,"dir":"Reference","previous_headings":"","what":"Execution Context — exec_context","title":"Execution Context — exec_context","text":"Wrapper around Sys.info() get_r_version provides consolidated list variables used logging contexts.","code":""},{"path":"/reference/exec_context.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execution Context — exec_context","text":"","code":"exec_context(   keep_args = F,   max_calls = 5,   call_subset = c(-1, -1),   filter_internal = T )"},{"path":"/reference/exec_context.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execution Context — exec_context","text":"keep_args bool specify keep function arguments max_calls maximum number calls keep stack call_subset offset index system calls filter_internal filter internal calls?","code":""},{"path":"/reference/exec_context.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execution Context — exec_context","text":"system context evaluating fmt_metric objects.","code":""},{"path":[]},{"path":"/reference/extract_func_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Function Name — extract_func_name","title":"Extract Function Name — extract_func_name","text":"Extracts name function deparse call.","code":""},{"path":"/reference/extract_func_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Function Name — extract_func_name","text":"","code":"extract_func_name(func)"},{"path":"/reference/extract_func_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Function Name — extract_func_name","text":"func function name","code":""},{"path":"/reference/extract_func_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Function Name — extract_func_name","text":"function name without arguments","code":""},{"path":[]},{"path":"/reference/format.fmt_timestamp.html","id":null,"dir":"Reference","previous_headings":"","what":"Gets the format of a format object. — format.fmt_timestamp","title":"Gets the format of a format object. — format.fmt_timestamp","text":"Gets format format object.","code":""},{"path":"/reference/format.fmt_timestamp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gets the format of a format object. — format.fmt_timestamp","text":"","code":"# S3 method for fmt_timestamp format(x, ...)"},{"path":"/reference/format.fmt_timestamp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gets the format of a format object. — format.fmt_timestamp","text":"x object extract value . ... arguments passed methods.","code":""},{"path":"/reference/format.fmt_timestamp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gets the format of a format object. — format.fmt_timestamp","text":"object's value","code":""},{"path":"/reference/format.log_level.html","id":null,"dir":"Reference","previous_headings":"","what":"Log Level Format — format.log_level","title":"Log Level Format — format.log_level","text":"formats message style log level.","code":""},{"path":"/reference/format.log_level.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log Level Format — format.log_level","text":"","code":"# S3 method for log_level format(x, message = character(0), ...)"},{"path":"/reference/format.log_level.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log Level Format — format.log_level","text":"x log level message message format ... arguments passed methods.","code":""},{"path":"/reference/format.log_level.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log Level Format — format.log_level","text":"styled level information","code":""},{"path":"/reference/format.log_level.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Log Level Format — format.log_level","text":"","code":"if (FALSE) { level_info(LEVEL) }"},{"path":"/reference/format_fn_call.html","id":null,"dir":"Reference","previous_headings":"","what":"Format Function Call — format_fn_call","title":"Format Function Call — format_fn_call","text":"Formats function call deparsed string.","code":""},{"path":"/reference/format_fn_call.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Function Call — format_fn_call","text":"","code":"format_fn_call(expr, cutoff = 100L)"},{"path":"/reference/format_fn_call.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format Function Call — format_fn_call","text":"expr function call cutoff max width cutoff","code":""},{"path":"/reference/format_fn_call.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format Function Call — format_fn_call","text":"string representation func call.","code":""},{"path":[]},{"path":"/reference/get_call_stack.html","id":null,"dir":"Reference","previous_headings":"","what":"Formatted Call Stack — get_call_stack","title":"Formatted Call Stack — get_call_stack","text":"Placeholder formatted call stack log layout.","code":""},{"path":"/reference/get_call_stack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formatted Call Stack — get_call_stack","text":"","code":"get_call_stack(keep_args = F, call_subset = c(-1, -1), filter_internal = T)"},{"path":"/reference/get_call_stack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formatted Call Stack — get_call_stack","text":"keep_args T/F indicate want keep call arguments . call_subset offset index system calls filter_internal filter internal calls?","code":""},{"path":"/reference/get_call_stack.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Formatted Call Stack — get_call_stack","text":"formatted call stack","code":""},{"path":[]},{"path":"/reference/get_configurations.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Configurations — get_configurations","title":"Get Configurations — get_configurations","text":"Gets available logging configurations exposed package.","code":""},{"path":"/reference/get_configurations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Configurations — get_configurations","text":"","code":"get_configurations(pkgname = \"dyn.log\")"},{"path":"/reference/get_configurations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Configurations — get_configurations","text":"pkgname package name get configs .","code":""},{"path":[]},{"path":"/reference/get_minimum_severity.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Minimum Severity — get_minimum_severity","title":"Get Minimum Severity — get_minimum_severity","text":"Gets log level highest threshold used internally log 'trace/info' level messages.","code":""},{"path":"/reference/get_minimum_severity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Minimum Severity — get_minimum_severity","text":"","code":"get_minimum_severity()"},{"path":"/reference/get_minimum_severity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Minimum Severity — get_minimum_severity","text":"styled level information","code":""},{"path":"/reference/get_r_version.html","id":null,"dir":"Reference","previous_headings":"","what":"R Version — get_r_version","title":"R Version — get_r_version","text":"Wrapper around R.Version() produce nicely formatted string use use sys_context.","code":""},{"path":"/reference/get_r_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R Version — get_r_version","text":"","code":"get_r_version()"},{"path":"/reference/get_r_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"R Version — get_r_version","text":"R environment version (major).(minor) format","code":""},{"path":[]},{"path":"/reference/get_system_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Get System Info — get_system_info","title":"Get System Info — get_system_info","text":"Wrapper around Sys.info() provides values named list format.","code":""},{"path":"/reference/get_system_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get System Info — get_system_info","text":"","code":"get_system_info()"},{"path":"/reference/get_system_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get System Info — get_system_info","text":"Sys.info() named list","code":""},{"path":[]},{"path":"/reference/init_logger.html","id":null,"dir":"Reference","previous_headings":"","what":"Init Logger — init_logger","title":"Init Logger — init_logger","text":"Loads configuration passed , uses default nothing specified, attaches reference singleton dispatcher global environment.","code":""},{"path":"/reference/init_logger.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Init Logger — init_logger","text":"","code":"init_logger(file_path = NULL)"},{"path":"/reference/init_logger.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Init Logger — init_logger","text":"file_path logging configuration use.","code":""},{"path":[]},{"path":"/reference/is_logger_call.html","id":null,"dir":"Reference","previous_headings":"","what":"Is Logger Call — is_logger_call","title":"Is Logger Call — is_logger_call","text":"Determines call came logger, can exclude call stack.","code":""},{"path":"/reference/is_logger_call.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is Logger Call — is_logger_call","text":"","code":"is_logger_call(call)"},{"path":"/reference/is_logger_call.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is Logger Call — is_logger_call","text":"call function call","code":""},{"path":"/reference/is_logger_call.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is Logger Call — is_logger_call","text":"string representation func call.","code":""},{"path":[]},{"path":"/reference/length.log_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Log Layout Length — length.log_layout","title":"Log Layout Length — length.log_layout","text":"Generic override length log layout returns number individual format objects layout.","code":""},{"path":"/reference/length.log_layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log Layout Length — length.log_layout","text":"","code":"# S3 method for log_layout length(x, ...)"},{"path":"/reference/length.log_layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log Layout Length — length.log_layout","text":"x log format ... arguments passed methods.","code":""},{"path":"/reference/length.log_layout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log Layout Length — length.log_layout","text":"number formats layout.","code":""},{"path":"/reference/level_description.html","id":null,"dir":"Reference","previous_headings":"","what":"Log Level Description — level_description","title":"Log Level Description — level_description","text":"Gets description log level. Gets description log level.","code":""},{"path":"/reference/level_description.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log Level Description — level_description","text":"","code":"level_description(level)  level_description(level)"},{"path":"/reference/level_description.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log Level Description — level_description","text":"level log level","code":""},{"path":"/reference/level_description.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log Level Description — level_description","text":"level description level severity","code":""},{"path":"/reference/level_description.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Log Level Description — level_description","text":"","code":"if (FALSE) { level_description(LEVEL) } if (FALSE) { level_description(LEVEL) }"},{"path":"/reference/level_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Log Level Information — level_info","title":"Log Level Information — level_info","text":"Gets log level information.","code":""},{"path":"/reference/level_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log Level Information — level_info","text":"","code":"level_info(level)"},{"path":"/reference/level_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log Level Information — level_info","text":"level log level","code":""},{"path":"/reference/level_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log Level Information — level_info","text":"log level information","code":""},{"path":"/reference/level_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Log Level Information — level_info","text":"","code":"if (FALSE) { level_info(LEVEL) }"},{"path":"/reference/level_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Level Name — level_name","title":"Get Level Name — level_name","text":"gets name log level.","code":""},{"path":"/reference/level_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Level Name — level_name","text":"","code":"level_name(level)"},{"path":"/reference/level_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Level Name — level_name","text":"level log level","code":""},{"path":"/reference/level_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Level Name — level_name","text":"log level name","code":""},{"path":"/reference/level_severities.html","id":null,"dir":"Reference","previous_headings":"","what":"Level Severities — level_severities","title":"Level Severities — level_severities","text":"Gets severity associated log level.","code":""},{"path":"/reference/level_severities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Level Severities — level_severities","text":"","code":"level_severities()"},{"path":"/reference/level_severities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Level Severities — level_severities","text":"styled level information","code":""},{"path":"/reference/level_severity.html","id":null,"dir":"Reference","previous_headings":"","what":"get level severity — level_severity","title":"get level severity — level_severity","text":"Gets severity log level.","code":""},{"path":"/reference/level_severity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get level severity — level_severity","text":"","code":"level_severity(level)  level_severity(level)"},{"path":"/reference/level_severity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get level severity — level_severity","text":"level log level","code":""},{"path":"/reference/level_severity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get level severity — level_severity","text":"level severity level severity","code":""},{"path":"/reference/level_severity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get level severity — level_severity","text":"","code":"if (FALSE) { level_severity(LEVEL) } if (FALSE) { level_severity(LEVEL) }"},{"path":"/reference/load_log_layouts.html","id":null,"dir":"Reference","previous_headings":"","what":"Load Log Layouts — load_log_layouts","title":"Load Log Layouts — load_log_layouts","text":"Parses loads layouts specified logging configuration registers log dispatcher via log_layouts active binding.","code":""},{"path":"/reference/load_log_layouts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load Log Layouts — load_log_layouts","text":"","code":"load_log_layouts(layouts)"},{"path":"/reference/load_log_layouts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load Log Layouts — load_log_layouts","text":"layouts defined configuration","code":""},{"path":"/reference/load_log_layouts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load Log Layouts — load_log_layouts","text":"None.","code":""},{"path":[]},{"path":"/reference/log_layout_detail.html","id":null,"dir":"Reference","previous_headings":"","what":"Log Layout Detail — log_layout_detail","title":"Log Layout Detail — log_layout_detail","text":"Gets layout formats distinct format types log layout instance, useful determining appropriate amount log context construct.","code":""},{"path":"/reference/log_layout_detail.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log Layout Detail — log_layout_detail","text":"","code":"log_layout_detail(layout)"},{"path":"/reference/log_layout_detail.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log Layout Detail — log_layout_detail","text":"layout object extract layout detail .","code":""},{"path":"/reference/log_layout_detail.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log Layout Detail — log_layout_detail","text":"layout format","code":""},{"path":"/reference/log_layouts.html","id":null,"dir":"Reference","previous_headings":"","what":"Log Layouts — log_layouts","title":"Log Layouts — log_layouts","text":"active binding keep track log layouts created new_log_layout.","code":""},{"path":"/reference/log_layouts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log Layouts — log_layouts","text":"","code":"log_layouts(association = character(0), layout = NULL)"},{"path":"/reference/log_layouts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log Layouts — log_layouts","text":"association named association layout layout log layout add already existing.","code":""},{"path":"/reference/log_layouts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log Layouts — log_layouts","text":"defined log layouts","code":""},{"path":"/reference/log_levels.html","id":null,"dir":"Reference","previous_headings":"","what":"Log Levels — log_levels","title":"Log Levels — log_levels","text":"active binding keep track log levels created new_log_level.","code":""},{"path":"/reference/log_levels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log Levels — log_levels","text":"","code":"log_levels(name = character(0), level = NULL)"},{"path":"/reference/log_levels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log Levels — log_levels","text":"name name associated log level level log level add already existing.","code":""},{"path":"/reference/log_levels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log Levels — log_levels","text":"defined log levels","code":""},{"path":"/reference/new_fmt_cls_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Formatted field from the calling class scope. — new_fmt_cls_field","title":"Formatted field from the calling class scope. — new_fmt_cls_field","text":"Placeholder container class field","code":""},{"path":"/reference/new_fmt_cls_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formatted field from the calling class scope. — new_fmt_cls_field","text":"","code":"new_fmt_cls_field(style, field)"},{"path":"/reference/new_fmt_cls_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formatted field from the calling class scope. — new_fmt_cls_field","text":"style crayon::style() field field object display","code":""},{"path":"/reference/new_fmt_cls_field.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Formatted field from the calling class scope. — new_fmt_cls_field","text":"new_fmt_cls_field","code":""},{"path":[]},{"path":"/reference/new_fmt_exec_scope.html","id":null,"dir":"Reference","previous_headings":"","what":"Formatted variable from the execution scope. — new_fmt_exec_scope","title":"Formatted variable from the execution scope. — new_fmt_exec_scope","text":"Placeholder execution scope variable.","code":""},{"path":"/reference/new_fmt_exec_scope.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formatted variable from the execution scope. — new_fmt_exec_scope","text":"","code":"new_fmt_exec_scope(style, field)"},{"path":"/reference/new_fmt_exec_scope.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formatted variable from the execution scope. — new_fmt_exec_scope","text":"style crayon::style() field execution scope field","code":""},{"path":"/reference/new_fmt_exec_scope.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Formatted variable from the execution scope. — new_fmt_exec_scope","text":"new_fmt_cls_field","code":""},{"path":[]},{"path":"/reference/new_fmt_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Format Layout — new_fmt_layout","title":"Format Layout — new_fmt_layout","text":"Base type log format objects.","code":""},{"path":"/reference/new_fmt_layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Layout — new_fmt_layout","text":"","code":"new_fmt_layout(style)"},{"path":"/reference/new_fmt_layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format Layout — new_fmt_layout","text":"style crayon layout use log generation.","code":""},{"path":"/reference/new_fmt_layout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format Layout — new_fmt_layout","text":"new log format","code":""},{"path":[]},{"path":"/reference/new_fmt_line_break.html","id":null,"dir":"Reference","previous_headings":"","what":"Formatted Line Break — new_fmt_line_break","title":"Formatted Line Break — new_fmt_line_break","text":"Placeholder new line log layout.","code":""},{"path":"/reference/new_fmt_line_break.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formatted Line Break — new_fmt_line_break","text":"","code":"new_fmt_line_break()"},{"path":"/reference/new_fmt_line_break.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Formatted Line Break — new_fmt_line_break","text":"log layout newline.","code":""},{"path":[]},{"path":"/reference/new_fmt_literal.html","id":null,"dir":"Reference","previous_headings":"","what":"Formatted Literal — new_fmt_literal","title":"Formatted Literal — new_fmt_literal","text":"Placeholder formatted literal log layout.","code":""},{"path":"/reference/new_fmt_literal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formatted Literal — new_fmt_literal","text":"","code":"new_fmt_literal(style, literal)"},{"path":"/reference/new_fmt_literal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formatted Literal — new_fmt_literal","text":"style format style (crayon) literal log value","code":""},{"path":"/reference/new_fmt_literal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Formatted Literal — new_fmt_literal","text":"log metric layout.","code":""},{"path":[]},{"path":"/reference/new_fmt_literal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formatted Literal — new_fmt_literal","text":"","code":"if (FALSE) { new_fmt_literal(red $ bold, \"literal text\")  new_fmt_literal(blue $ italic, \"literal text\") }"},{"path":"/reference/new_fmt_log_level.html","id":null,"dir":"Reference","previous_headings":"","what":"Formatted Log Level — new_fmt_log_level","title":"Formatted Log Level — new_fmt_log_level","text":"Placeholder formatted log level log layout.","code":""},{"path":"/reference/new_fmt_log_level.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formatted Log Level — new_fmt_log_level","text":"","code":"new_fmt_log_level()"},{"path":"/reference/new_fmt_log_level.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Formatted Log Level — new_fmt_log_level","text":"fmt_log_level.","code":""},{"path":"/reference/new_fmt_log_msg.html","id":null,"dir":"Reference","previous_headings":"","what":"Formatted Messaged, based on log level — new_fmt_log_msg","title":"Formatted Messaged, based on log level — new_fmt_log_msg","text":"Placeholder log msg log layout.","code":""},{"path":"/reference/new_fmt_log_msg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formatted Messaged, based on log level — new_fmt_log_msg","text":"","code":"new_fmt_log_msg()"},{"path":"/reference/new_fmt_log_msg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Formatted Messaged, based on log level — new_fmt_log_msg","text":"log layout newline.","code":""},{"path":[]},{"path":"/reference/new_fmt_metric.html","id":null,"dir":"Reference","previous_headings":"","what":"Formatted Metric — new_fmt_metric","title":"Formatted Metric — new_fmt_metric","text":"Inserts formatted log metric.","code":""},{"path":"/reference/new_fmt_metric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formatted Metric — new_fmt_metric","text":"","code":"new_fmt_metric(style, metric)"},{"path":"/reference/new_fmt_metric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formatted Metric — new_fmt_metric","text":"style layout use log generation metric metric log.","code":""},{"path":"/reference/new_fmt_metric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Formatted Metric — new_fmt_metric","text":"new formatted metric","code":""},{"path":[]},{"path":"/reference/new_fmt_metric.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formatted Metric — new_fmt_metric","text":"","code":"if (FALSE) { new_fmt_metric(bold $ green, \"sysname\")  new_fmt_metric(bold $ red, \"release\") }"},{"path":"/reference/new_fmt_timestamp.html","id":null,"dir":"Reference","previous_headings":"","what":"Formatted Time stamp — new_fmt_timestamp","title":"Formatted Time stamp — new_fmt_timestamp","text":"Placeholder formatted time stamp log layout.","code":""},{"path":"/reference/new_fmt_timestamp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Formatted Time stamp — new_fmt_timestamp","text":"","code":"new_fmt_timestamp(style, format = \"[%x %H:%M:%S %z]\")"},{"path":"/reference/new_fmt_timestamp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Formatted Time stamp — new_fmt_timestamp","text":"style format style (crayon) format time stamp format, defaults : %x %H:%M:%S %z, e.g., 12/04/21 14:31:25 -0500","code":""},{"path":"/reference/new_fmt_timestamp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Formatted Time stamp — new_fmt_timestamp","text":"log metric layout.","code":""},{"path":[]},{"path":"/reference/new_fmt_timestamp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Formatted Time stamp — new_fmt_timestamp","text":"","code":"if (FALSE) { fmt_timestamp(red $ bold, \"%Y-%m-%d %H:%M:%S\")  fmt_timestamp(blue $ italic, \"%x %H:%M:%S %z\") }"},{"path":"/reference/new_log_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Log Layout — new_log_layout","title":"Log Layout — new_log_layout","text":"class stores collection log format objects understands associate given format class objects.","code":""},{"path":"/reference/new_log_layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log Layout — new_log_layout","text":"","code":"new_log_layout(   format = list(),   seperator = \" \",   new_line = \"\\n\",   association = character() )"},{"path":"/reference/new_log_layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log Layout — new_log_layout","text":"format collection format objects initialize . seperator format entry separator, defaults single space. new_line layout separator inserted lines. association objects associate log format .","code":""},{"path":"/reference/new_log_layout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log Layout — new_log_layout","text":"object's value","code":""},{"path":[]},{"path":"/reference/new_log_level.html","id":null,"dir":"Reference","previous_headings":"","what":"Log Level — new_log_level","title":"Log Level — new_log_level","text":"S3 object represent typed & predefined log level.","code":""},{"path":"/reference/new_log_level.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log Level — new_log_level","text":"","code":"new_log_level(name, description, severity, log_style = NULL, msg_style = NULL)"},{"path":"/reference/new_log_level.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log Level — new_log_level","text":"name name log level string representation. description description log level & limited info appropriate usage. severity log severity used determining message get displayed according currently set evaluation threshold. log_style crayon::style() colorize log level. msg_style crayon::style() style gray scale log message, typically inverted strength, according severity.","code":""},{"path":"/reference/new_log_level.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log Level — new_log_level","text":"log_level","code":""},{"path":"/reference/style.fmt_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Style — style.fmt_layout","title":"Style — style.fmt_layout","text":"Gets style format object.","code":""},{"path":"/reference/style.fmt_layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Style — style.fmt_layout","text":"","code":"# S3 method for fmt_layout style(obj, ...)"},{"path":"/reference/style.fmt_layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Style — style.fmt_layout","text":"obj object extract value . ... arguments passed methods.","code":""},{"path":"/reference/style.fmt_layout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Style — style.fmt_layout","text":"object's value","code":""},{"path":"/reference/style.html","id":null,"dir":"Reference","previous_headings":"","what":"Style — style","title":"Style — style","text":"Generic style method used overriding get style information various logging objects.","code":""},{"path":"/reference/style.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Style — style","text":"","code":"style(obj)"},{"path":"/reference/style.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Style — style","text":"obj object extract value .","code":""},{"path":"/reference/style.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Style — style","text":"object's value","code":""},{"path":"/reference/style.log_level.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Level Style — style.log_level","title":"Get Level Style — style.log_level","text":"gets style log level.","code":""},{"path":"/reference/style.log_level.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Level Style — style.log_level","text":"","code":"# S3 method for log_level style(obj, ...)"},{"path":"/reference/style.log_level.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Level Style — style.log_level","text":"obj log level ... arguments passed methods.","code":""},{"path":"/reference/style.log_level.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Level Style — style.log_level","text":"log level name","code":""},{"path":"/reference/sys_context.html","id":null,"dir":"Reference","previous_headings":"","what":"System Context — sys_context","title":"System Context — sys_context","text":"Wrapper around Sys.info() get_r_version provides consolidated list variables used logging contexts.","code":""},{"path":"/reference/sys_context.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"System Context — sys_context","text":"","code":"sys_context()"},{"path":"/reference/sys_context.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"System Context — sys_context","text":"system context evaluating fmt_metric objects.","code":""},{"path":"/reference/sys_context.html","id":"metrics","dir":"Reference","previous_headings":"","what":"Metrics","title":"System Context — sys_context","text":"System Context \"sysname\" : operating system name. \"release\" : OS release. \"version\" : OS version. \"nodename\" : name machine known network (). \"machine\" : concise description hardware, often CPU type. \"login\" : user's login name, \"unknown\" ascertained. \"user\" : name real user ID, \"unknown\" ascertained. \"r-ver\" : R Version (major).(minor) format.","code":""},{"path":[]},{"path":"/reference/value.fmt_cls_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Value — value.fmt_cls_field","title":"Value — value.fmt_cls_field","text":"Generic override getting value enclosing class variable.","code":""},{"path":"/reference/value.fmt_cls_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Value — value.fmt_cls_field","text":"","code":"# S3 method for fmt_cls_field value(obj, cls_context, ...)"},{"path":"/reference/value.fmt_cls_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Value — value.fmt_cls_field","text":"obj object extract value . cls_context class scope evaluate . ... arguments passed methods.","code":""},{"path":"/reference/value.fmt_cls_field.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Value — value.fmt_cls_field","text":"object's value","code":""},{"path":"/reference/value.fmt_exec_scope.html","id":null,"dir":"Reference","previous_headings":"","what":"Value — value.fmt_exec_scope","title":"Value — value.fmt_exec_scope","text":"Generic override getting value execution scope variable.","code":""},{"path":"/reference/value.fmt_exec_scope.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Value — value.fmt_exec_scope","text":"","code":"# S3 method for fmt_exec_scope value(obj, env_context, ...)"},{"path":"/reference/value.fmt_exec_scope.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Value — value.fmt_exec_scope","text":"obj object extract value . env_context class scope evaluate . ... arguments passed methods.","code":""},{"path":"/reference/value.fmt_exec_scope.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Value — value.fmt_exec_scope","text":"object's value","code":""},{"path":"/reference/value.fmt_literal.html","id":null,"dir":"Reference","previous_headings":"","what":"Value — value.fmt_literal","title":"Value — value.fmt_literal","text":"Generic override getting value literal log message.","code":""},{"path":"/reference/value.fmt_literal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Value — value.fmt_literal","text":"","code":"# S3 method for fmt_literal value(obj, ...)"},{"path":"/reference/value.fmt_literal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Value — value.fmt_literal","text":"obj object extract value . ... arguments passed methods.","code":""},{"path":"/reference/value.fmt_literal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Value — value.fmt_literal","text":"object's value","code":""},{"path":"/reference/value.fmt_log_level.html","id":null,"dir":"Reference","previous_headings":"","what":"Value — value.fmt_log_level","title":"Value — value.fmt_log_level","text":"Generic override getting value log level information.","code":""},{"path":"/reference/value.fmt_log_level.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Value — value.fmt_log_level","text":"","code":"# S3 method for fmt_log_level value(obj, ...)"},{"path":"/reference/value.fmt_log_level.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Value — value.fmt_log_level","text":"obj object extract value . ... arguments passed methods.","code":""},{"path":"/reference/value.fmt_log_level.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Value — value.fmt_log_level","text":"object's value","code":""},{"path":"/reference/value.fmt_log_msg.html","id":null,"dir":"Reference","previous_headings":"","what":"Value — value.fmt_log_msg","title":"Value — value.fmt_log_msg","text":"Generic override getting value log format message.","code":""},{"path":"/reference/value.fmt_log_msg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Value — value.fmt_log_msg","text":"","code":"# S3 method for fmt_log_msg value(obj, ...)"},{"path":"/reference/value.fmt_log_msg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Value — value.fmt_log_msg","text":"obj object extract value . ... arguments passed methods.","code":""},{"path":"/reference/value.fmt_log_msg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Value — value.fmt_log_msg","text":"object's value","code":""},{"path":"/reference/value.fmt_metric.html","id":null,"dir":"Reference","previous_headings":"","what":"Value — value.fmt_metric","title":"Value — value.fmt_metric","text":"Generic override getting value system info variable.","code":""},{"path":"/reference/value.fmt_metric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Value — value.fmt_metric","text":"","code":"# S3 method for fmt_metric value(obj, sys_context, ...)"},{"path":"/reference/value.fmt_metric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Value — value.fmt_metric","text":"obj object extract value . sys_context context evaluate metric. ... arguments passed methods.","code":""},{"path":"/reference/value.fmt_metric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Value — value.fmt_metric","text":"object's value","code":""},{"path":"/reference/value.fmt_newline.html","id":null,"dir":"Reference","previous_headings":"","what":"Value — value.fmt_newline","title":"Value — value.fmt_newline","text":"Generic override getting value new line placeholder.","code":""},{"path":"/reference/value.fmt_newline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Value — value.fmt_newline","text":"","code":"# S3 method for fmt_newline value(obj, ...)"},{"path":"/reference/value.fmt_newline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Value — value.fmt_newline","text":"obj object extract value . ... arguments passed methods.","code":""},{"path":"/reference/value.fmt_newline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Value — value.fmt_newline","text":"object's value","code":""},{"path":"/reference/value.fmt_timestamp.html","id":null,"dir":"Reference","previous_headings":"","what":"Value — value.fmt_timestamp","title":"Value — value.fmt_timestamp","text":"Generic override getting value formatted timestamp.","code":""},{"path":"/reference/value.fmt_timestamp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Value — value.fmt_timestamp","text":"","code":"# S3 method for fmt_timestamp value(obj, ...)"},{"path":"/reference/value.fmt_timestamp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Value — value.fmt_timestamp","text":"obj object extract value . ... arguments passed methods.","code":""},{"path":"/reference/value.fmt_timestamp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Value — value.fmt_timestamp","text":"object's value","code":""},{"path":"/reference/value.html","id":null,"dir":"Reference","previous_headings":"","what":"Value — value","title":"Value — value","text":"Base method getting value format object.","code":""},{"path":"/reference/value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Value — value","text":"","code":"value(obj, ...)"},{"path":"/reference/value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Value — value","text":"obj object extract value . ... arguments passed methods.","code":""},{"path":"/reference/value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Value — value","text":"object's value","code":""},{"path":"/reference/wipe_logger.html","id":null,"dir":"Reference","previous_headings":"","what":"Wipe the Logger Instance — wipe_logger","title":"Wipe the Logger Instance — wipe_logger","text":"Cleans dangling global instance previous load.","code":""},{"path":"/reference/wipe_logger.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wipe the Logger Instance — wipe_logger","text":"","code":"wipe_logger()"},{"path":"/reference/wipe_logger.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wipe the Logger Instance — wipe_logger","text":"None.","code":""},{"path":[]},{"path":[]},{"path":"/news/index.html","id":"whats-changed-0-3-2","dir":"Changelog","previous_headings":"","what":"What’s Changed","title":"dyn.log 0.3.2","text":"added default logging function uses level highest severity. changed loggers instantiated, must now call init_logging() specify logging configuration dyn.log.config option. cleaned entire configuration module streamlined process initialization. updated configuration vignette reflect changes. added withr suggestion package isolate logging unit tests initialized environment. added configuration setting change variable name global logging instance. “Logger” still default, now can specify legal R variable name default.","code":""},{"path":[]},{"path":"/news/index.html","id":"whats-changed-0-3-1","dir":"Changelog","previous_headings":"","what":"What’s Changed","title":"dyn.log 0.3.1","text":"None refactored entire configuration module streamline process attaching logger global environment. added event handler ‘.onAttach’ monitors logger’s existence every load; annoying behavior wiping local environment vars logger disappearing now fully resolved.","code":""},{"path":[]},{"path":"/news/index.html","id":"whats-changed-0-3-0","dir":"Changelog","previous_headings":"","what":"What’s Changed","title":"dyn.log 0.3.0","text":"added private field support class context logging. added lintr coverage makefile. added public & private property examples Configuration vignette. bug fix call stack context due change rlang::trace cleaned formatting unit tests. object_name_lintr (R6 Class names explicit excludes) commas_lintr assignment_lintr object_useage_lintr spaces_left_parenthesis_linter","code":""},{"path":[]},{"path":"/news/index.html","id":"whats-changed-0-2-5","dir":"Changelog","previous_headings":"","what":"What’s Changed","title":"dyn.log 0.2.5","text":"created Hex logo dyn.log package. added pkg hex + added readme updated dependency pkg versions cleaned logging configurations started cleaning unit tests","code":""},{"path":[]},{"path":"/news/index.html","id":"whats-changed-0-2-4","dir":"Changelog","previous_headings":"","what":"What’s Changed","title":"dyn.log 0.2.4","text":"cleaned code coverage ~95%. added vignette “Configuration” detail steps customizing dyn.log client applications. cleaned logging configurations streamline customization. added clear examples setup bespoke customizations dyn.log via config templates","code":""},{"path":[]},{"path":"/news/index.html","id":"patch-release-0-2-3-1","dir":"Changelog","previous_headings":"","what":"(Patch Release)","title":"dyn.log 0.2.3-1","text":"patch expose configurations","code":""},{"path":[]},{"path":"/news/index.html","id":"whats-changed-0-2-3","dir":"Changelog","previous_headings":"","what":"What’s Changed","title":"dyn.log 0.2.3","text":"added functionality export logging configurations bundled package can effectively used templates consuming clients. Added configuration vignette examples use bundled configurations templates. cleaned renv dependencies git actions build cache mechanics reduce build times. added dispatch & singleton helper objects streamline unit testing core functionality. streamlined threshold log dispatch evaluation routine. cleaned makefile provide clean & efficient interface building deploying package. cleaned logging configurations added ability specify layouts strings !expr’s.","code":""},{"path":[]},{"path":"/news/index.html","id":"whats-changed-0-2-2","dir":"Changelog","previous_headings":"","what":"What’s Changed","title":"dyn.log 0.2.2","text":"added execution context & related log formatters (call stack, top call, parent fn, etc.) added vignettes : levels, formats layouts clearly defined context objects structured classes. added call stack & execution scope based rlang trace. updated vignettes use fansi package display clean logging output like see terminal. added callstack evaluation parameters logging configuration account things like testthat knitr general cleaned documentation unit tests. added lintr github action & started working clearing warnings.","code":""},{"path":[]},{"path":"/news/index.html","id":"whats-changed-0-1-3","dir":"Changelog","previous_headings":"","what":"What’s Changed","title":"dyn.log 0.1.3-alpha","text":"Log layouts now fully configuration driven, w/ reasonable defaults. cleaned log level/layout active bindings don’t need separate accessor methods get instantiated objects bindings (name). updated README use fansi package display clean logging output like see terminal. refactored log layouts formats parameter specify render log layout. moved default layouts code configuration -layouts node config.yaml. cleaned associated unit tests & documentation. cleaned generics ‘style’, ‘value’ ‘format’. updated renv pkgs cache github actions CI builds reduce build time ~90%.","code":""},{"path":[]},{"path":"/news/index.html","id":"whats-changed-0-1-2","dir":"Changelog","previous_headings":"","what":"What’s Changed","title":"dyn.log 0.1.2-alpha","text":"added codecov, R CMD Check & pkgdown github actions added pkg site started fleshing basic vignettes usage/design. cleaned documentation package-wide converted log levels & layouts active bindings added README gives solid overview package trying achieve & ","code":""},{"path":[]},{"path":"/news/index.html","id":"initial-version-0-1-1","dir":"Changelog","previous_headings":"","what":"Initial Version","title":"dyn.log v0.1.1-alpha","text":"New Features baseline logging components fully functional: levels, formats, layouts dispatcher. pkg instantiates singleton instance log dispatcher, default configuration give fully functional logging environment. cls level customization options working expected; can create log layout associated R6 type, logger spit variables enclosing class. Example added README.","code":""}]
